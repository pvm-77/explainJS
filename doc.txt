var declarations khas baat

SCOPE:: 
- iska scope function scope ya global scope not local scope
code example

```
var x=4
if


//QUESTIONs


// let variable declarations

SCOPE: block scoped or function scoped
HOISTING:non hoisted
console.log(t);
let t=9
ReferenceError: Cannot access 't' before initialization

REDECLARATION:not allowed in same scope

let a=9
let a=12
SyntaxError: Identifier 'a' has already been declared


REASSIGNMENT:possible
let a=4
a=6
console.log(a)


ASSIGNMENT:optional at time of decalaration

let a; // a can pe initialize
console.log(a)


var and let comparison
let declarations are scoped to blocks as well as functions.
let declarations can only be accessed after the line of declaration is reached (see temporal dead zone). For this reason, let declarations are commonly regarded as non-hoisted.
let declarations do not create properties on globalThis when declared at the top level of a script.
let declarations cannot be redeclared by any other declaration in the same scope.
let begins declarations, not statements. That means you cannot use a lone let declaration as the body of a block (which makes sense, since there's no way to access the variable).
Note that let is allowed as an identifier name when declared with var or function in non-strict mode, but you should avoid using let as an identifier name to prevent unexpected syntax ambiguities.
A let declaration within a function's body cannot have the same name as a parameter. A let declaration within a catch block cannot have the same name as the catch-bound identifier.